const config = require('../config');
const { cmd, commands } = require('../command');
const { runtime } = require('../lib/functions');
const axios = require('axios');
const os = require("os")

// Reusable function to check boolean envs
function isEnabled(value) {
    return value && value.toString().toLowerCase() === "true";
}

cmd({
    pattern: "env",
    alias: ["config", "settings", "setting"],
    desc: "Show all bot configuration variables (Owner Only)",
    category: "system",
    react: "‚öôÔ∏è",
    filename: __filename
}, 
async (conn, mek, m, { from, quoted, reply, isOwner }) => {
    try {
    
    // Owner check
        if (!isOwner) {
            return reply("üö´ *Owner Only Command!*");
        }
    
       let envSettings = `‚ï≠‚îÄ‚îÄ‚îÄ„Äé *${config.BOT_NAME} CONFIG* „Äè‚îÄ‚îÄ‚îÄ‚ùè
‚îÇ
‚îú‚îÄ‚ùè *ü§ñ BOT INFO*
‚îÇ  ‚îú‚îÄ‚àò *Name:* ${config.BOT_NAME}
‚îÇ  ‚îú‚îÄ‚àò *Prefix:* ${config.PREFIX}
‚îÇ  ‚îú‚îÄ‚àò *Owner:* ·¥¥·¥µ·¥ø·µÅ·¥∑·¥¨ ·¥ø·¥¨·¥∫·µÅ·¥π·¥µ·µÄ·¥¥·¥¨
‚îÇ  ‚îú‚îÄ‚àò *Number:* ${config.OWNER_NUMBER}
‚îÇ  ‚îú‚îÄ‚àò *Version:* ${config.BOT_VERSION}
‚îÇ  ‚îî‚îÄ‚àò *Mode:* ${config.MODE.toUpperCase()}
‚îÇ
‚îú‚îÄ‚ùè *‚öôÔ∏è CORE SETTINGS*
‚îÇ  ‚îú‚îÄ‚àò *Public Mode:* ${isEnabled(config.PUBLIC_MODE) ? "‚úÖ" : "‚ùå"}
‚îÇ  ‚îú‚îÄ‚àò *Always Online:* ${isEnabled(config.ALWAYS_ONLINE) ? "‚úÖ" : "‚ùå"}
‚îÇ  ‚îú‚îÄ‚àò *Read Msgs:* ${isEnabled(config.READ_MESSAGE) ? "‚úÖ" : "‚ùå"}
‚îÇ  ‚îî‚îÄ‚àò *Read Cmds:* ${isEnabled(config.READ_CMD) ? "‚úÖ" : "‚ùå"}
‚îÇ
‚îú‚îÄ‚ùè *üîå AUTOMATION*
‚îÇ  ‚îú‚îÄ‚àò *Auto Reply:* ${isEnabled(config.AUTO_REPLY) ? "‚úÖ" : "‚ùå"}
‚îÇ  ‚îú‚îÄ‚àò *Auto React:* ${isEnabled(config.AUTO_REACT) ? "‚úÖ" : "‚ùå"}
‚îÇ  ‚îú‚îÄ‚àò *Custom React:* ${isEnabled(config.CUSTOM_REACT) ? "‚úÖ" : "‚ùå"}
‚îÇ  ‚îú‚îÄ‚àò *React Emojis:* ${config.CUSTOM_REACT_EMOJIS}
‚îÇ  ‚îú‚îÄ‚àò *Auto Sticker:* ${isEnabled(config.AUTO_STICKER) ? "‚úÖ" : "‚ùå"}
‚îÇ  ‚îî‚îÄ‚àò *Auto Voice:* ${isEnabled(config.AUTO_VOICE) ? "‚úÖ" : "‚ùå"}
‚îÇ
‚îú‚îÄ‚ùè *üì¢ STATUS SETTINGS*
‚îÇ  ‚îú‚îÄ‚àò *Status Seen:* ${isEnabled(config.AUTO_STATUS_SEEN) ? "‚úÖ" : "‚ùå"}
‚îÇ  ‚îî‚îÄ‚àò *Status React:* ${isEnabled(config.AUTO_STATUS_REACT) ? "‚úÖ" : "‚ùå"}
‚îÇ
‚îú‚îÄ‚ùè *üõ°Ô∏è SECURITY*
‚îÇ  ‚îî‚îÄ‚àò *Anti-VV:* ${isEnabled(config.ANTI_VV) ? "‚úÖ" : "‚ùå"} 
‚îÇ
‚îú‚îÄ‚ùè *üé® MEDIA*
‚îÇ  ‚îú‚îÄ‚àò *Alive Msg:* ${config.ALIVE_MSG}
‚îÇ  ‚îî‚îÄ‚àò *Sticker Pack:* ${config.STICKER_NAME}
‚îÇ
‚îú‚îÄ‚ùè *‚è≥ MISC*
‚îÇ  ‚îú‚îÄ‚àò *Auto Typing:* ${isEnabled(config.AUTO_TYPING) ? "‚úÖ" : "‚ùå"}
‚îÇ  ‚îú‚îÄ‚àò *Auto Record:* ${isEnabled(config.AUTO_RECORDING) ? "‚úÖ" : "‚ùå"}
‚îÇ  ‚îú‚îÄ‚àò *Anti-Del Path:* ${config.ANTI_DEL_PATH}
‚îÇ  ‚îî‚îÄ‚àò *Dev Number:* ${config.DEV}
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùè


‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ       üîß OPTIONS MENU üîß
‚îÉ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÉ

‚î£‚îÅ WORK MODE ‚§µ
‚îÉ   ‚î£ 1.1 üîπ Public Work
‚îÉ   ‚î£ 1.2 üîπ Private Work
‚îÉ   ‚î£ 1.3 üîπ Group Only
‚îÉ   ‚îó 1.4 üîπ Inbox Only

‚î£‚îÅ AUTO VOICE ‚§µ
‚îÉ   ‚î£ 2.1 üîä Auto Voice On
‚îÉ   ‚îó 2.2 üîï Auto Voice Off

‚î£‚îÅ AUTO STATUS SEEN ‚§µ
‚îÉ   ‚î£ 3.1 üëÅ‚Äçüó® Auto Read Status On
‚îÉ   ‚îó 3.2 üëÅ‚ùå Auto Read Status Off

‚î£‚îÅ AUTO BIO ‚§µ
‚îÉ   ‚î£ 4.1 ‚úç Auto Bio On
‚îÉ   ‚îó 4.2 ‚úç‚ùå Auto Bio Off

‚î£‚îÅ 24/7 NEWS SERVICE ‚§µ
‚îÉ   ‚î£ 5.1 üì∞ Activate News Service
‚îÉ   ‚îó 5.2 üõë Deactivate News Service

‚î£‚îÅ AUTO TYPING ‚§µ
‚îÉ   ‚î£ 6.1 üìù Activate Auto Typing
‚îÉ   ‚îó 6.2 üìù‚ùå Deactivate Auto Typing

‚î£‚îÅ AUTO COMMAND READ ‚§µ
‚îÉ   ‚î£ 7.1 üñä Activate Auto Command Read
‚îÉ   ‚îó 7.2 üñä‚ùå Deactivate Auto Command Read
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

> ¬© Powerd by ùó•ùóîùó°ùó®ùó†ùóúùóßùóõùóî-ùó´-ùó†ùóó üåõ`;

       
      // Send config with image and vCard quote  
        const vv = 
        await conn.sendMessage(
            from,
            {
                image: { url: "https://raw.githubusercontent.com/Ranumithaofc/RANU-FILE-S-/refs/heads/main/images/Config%20img%20.jpg" },
                caption: envSettings,
                contextInfo: {
                    mentionedJid: [m.sender],
                    forwardingScore: 999,
                    isForwarded: false
                }
            },
            { quoted: mek }
        );

        // Optional PTT voice message
        await conn.sendMessage(
            from,
            {
                audio: { url: 'https://github.com/Ranumithaofc/RANU-FILE-S-/raw/refs/heads/main/Audio/envlist-music.mp3' },
                mimetype: 'audio/mp4',
                ptt: true
            },
            { quoted: mek }
        );
        conn.ev.on('messages.upsert', async (msgUpdate) => {
            const msg = msgUpdate.messages[0];
            if (!msg.message || !msg.message.extendedTextMessage) return;

            const selectedOption = msg.message.extendedTextMessage.text.trim();

            if (msg.message.extendedTextMessage.contextInfo && msg.message.extendedTextMessage.contextInfo.stanzaId === vv.key.id) {
                switch (selectedOption) {
                    case '1.1':
                        reply(".update MODE:public" );
                        reply("*`PUBLIC MOD` Selected successfull ‚úÖ*");
                        break;
                    case '1.2':               
                        reply(".update MODE:private");
                        reply("*`PRIVATE MOD` Selected successfull ‚úÖ*");
                        break;
                    case '1.3':               
                          reply(".update MODE:group");
                        reply("*`GROUP MOD` Selected successfull ‚úÖ*");
                      break;
                    case '1.4':     
                        reply(".update MODE:inbox");
                        reply("*`INBOX MOD` Selected successfull ‚úÖ*");
                      break;
                    case '2.1':     
                        reply(".update AUTO_VOICE:true");
                        reply(".restart");
                        break;
                    case '2.2':     
                        reply(".update AUTO_VOICE:false");
                        reply(".restart");
                    break;
                    case '3.1':    
                        reply(".update AUTO_READ_STATUS:true");
                        reply(".restart");
                    break;
                    case '3.2':    
                        reply(".update AUTO_READ_STATUS:false");
                        reply(".restart");
                    break;
                    case '4.1': 
                    reply(".update AUTO_BIO:true");
                    reply(".restart");
                    break;
                    case '4.2': 
                    reply(".update AUTO_BIO:false");
                    reply(".restart");
                    break;
                    case '5.1': 
                    reply(".startnews");
                    break;
                    case '5.2': 
                    reply(".stopnews");
                    break;
                    case '6.1':      
                        reply(".update AUTO_TYPING:true");
                        reply(".restart");
                        break;
                    case '6.2':   
                        reply(".update AUTO_TYPING:false");
                        reply(".restart");
                    break;
                    case '7.1': 
                        reply(".update AUTO_READ_CMD:true");
                        reply(".restart");
                    break;
                    case '7.2':   
                        reply(".update AUTO_READ_CMD:false");
                        reply(".restart");
                    
                        break;
                    default:
                        reply("Invalid option. Please select a valid optionüî¥");
                }

            }
        });

        

    } catch (error) {
        console.error('Env command error:', error);
        reply(`‚ùå Error displaying config: ${error.message}`);
    }
});
